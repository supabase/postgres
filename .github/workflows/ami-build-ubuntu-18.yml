name: Build Ubuntu 18 AMI

on:
  workflow_run:
    workflows: [Release AMI]
    types:
      - completed

  workflow_dispatch:

jobs:
  build:
    runs-on: [self-hosted, X64]
    timeout-minutes: 150
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Build AMI
        run: |
          GIT_SHA=${{github.sha}}
          packer build -var "git-head-version=${GIT_SHA}" -var "packer-execution-id=u18-${GITHUB_RUN_ID}" -var-file="development-arm.vars.pkr.hcl" -var-file="common.vars.pkr.hcl" -var-file="legacy.vars.pkr.hcl" amazon-arm64.pkr.hcl

      - name: Grab release version
        id: process_release_version
        run: |
          VERSION=$(sed -e 's/postgres-version = "\(.*\)"/\1/g' common.vars.pkr.hcl)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          
      - name: List files
        id: list_files
        run: |
          ls -la /tmp/

      - name: configure aws credentials - staging
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.DEV_AWS_ROLE }}
          aws-region: "us-east-1"

      - name: Upload pg binaries to s3 staging
        run: |
          aws s3 cp /tmp/pg_binaries.tar.gz s3://${{ secrets.ARTIFACTS_BUCKET }}/upgrades/postgres/${{ steps.process_release_version.outputs.version }}/18.04.tar.gz

      - name: configure aws credentials - prod
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.PROD_AWS_ROLE }}
          aws-region: "us-east-1"

      - name: Upload pg binaries to s3 prod
        run: |
          aws s3 cp /tmp/pg_binaries.tar.gz s3://${{ secrets.PROD_ARTIFACTS_BUCKET }}/upgrades/postgres/${{ steps.process_release_version.outputs.version }}/18.04.tar.gz

      - name: Deregister image
        if: ${{ always() }}
        continue-on-error: true
        run: |
          IMAGE_IDS=$(aws ec2 describe-images --filters "Name=name,Values=builder-supabase-postgres-u18-*" --query "Images[] .ImageId" --output text)
          for IMAGE_ID in $IMAGE_IDS; do
            SNAPSHOTS=$(aws ec2 describe-images --image-ids $IMAGE_ID --query "Images[*].BlockDeviceMappings[*].Ebs.SnapshotId" --output text)

            echo "Deregistering image $IMAGE_ID"
            aws ec2 deregister-image --image-id $IMAGE_ID

            for SNAPSHOT in $SNAPSHOTS; do
              echo "Deleting snapshot $SNAPSHOT"
              aws ec2 delete-snapshot --snapshot-id $SNAPSHOT
            done
          done

      - name: Cleanup resources on build cancellation
        if: ${{ cancelled() }}
        run: |
          aws ec2 describe-instances --filters "Name=tag:packerExecutionId,Values=u18-${GITHUB_RUN_ID}" --query "Reservations[].Instances[].InstanceId" --output text | xargs -I {} aws ec2 terminate-instances --instance-ids {}
