# Downloading dependencies
- name: GPG dependencies
  apt:
    name: gnupg

- name: Add Postgres GPG key
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8

- name: Add Postgres PPA
  apt_repository:
    repo: "deb https://apt-archive.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg-archive main"
    state: present

# let's build binaries from their published source packages
- name: Add Postgres PPA - source
  apt_repository:
    repo: "deb-src https://apt-archive.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg-archive main"
    state: present

- name: Create temporary build directory
  tempfile:
    state: directory
  register: pg_build_dir

- name: Setting mcpu (arm)
  set_fact:
    mcpu: "neoverse-n1"
  when: platform == "arm64"

- name: Postgres - build
  shell: |
    set -e
    export PYTHONDONTWRITEBYTECODE=1
    savedAptMark="$(apt-mark showmanual)"
    cd "{{ pg_build_dir.path }}"

    # create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)
    apt-get update
    apt-get install -y --no-install-recommends dpkg-dev
    echo "deb [ trusted=yes ] file://{{ pg_build_dir.path }} ./" > /etc/apt/sources.list.d/temp.list
    _update_repo() {
      dpkg-scanpackages . > Packages
      apt-get -o Acquire::GzipIndexes=false update
    }
    _update_repo

    # build .deb files from upstream's source packages (which are verified by apt-get)
    export DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)"
    export DEB_CPPFLAGS_APPEND="-mcpu={{ mcpu }} -fsigned-char"

    # we have to build postgresql-common first because postgresql-15 shares "debian/rules" logic with it: https://salsa.debian.org/postgresql/postgresql/-/commit/99f44476e258cae6bf9e919219fa2c5414fa2876
    # (and it "Depends: pgdg-keyring")
    apt-get build-dep -y postgresql-common pgdg-keyring
    apt-get source --compile postgresql-common pgdg-keyring
    _update_repo
    apt-get build-dep -y "postgresql-{{ postgresql_major }}={{ postgresql_release }}-1.pgdg20.04+1"
    apt-get source --compile "postgresql-{{ postgresql_major }}={{ postgresql_release }}-1.pgdg20.04+1"

    # we don't remove APT lists here because they get re-downloaded and removed later
    # reset apt-mark's "manual" list so that "purge --auto-remove" will remove all build dependencies
    # (which is done after we install the built packages so we don't have to redownload any overlapping dependencies)
    apt-mark showmanual | xargs apt-mark auto > /dev/null
    apt-mark manual $savedAptMark
    _update_repo

- name: Postgres - install commons
  apt:
    name: postgresql-common
    install_recommends: no

- name: Do not create main cluster
  shell:
    cmd: sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf

- name: Postgres - install server
  apt:
    name: postgresql-{{ postgresql_major }}={{ postgresql_release }}-1.pgdg20.04+1
    install_recommends: no

# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)
- name: Remove build dependencies
  shell: |
    set -e
    rm -rf /var/lib/apt/lists/*
    apt-get purge -y --auto-remove
    rm -rf "{{ pg_build_dir.path }}" /etc/apt/sources.list.d/temp.list
    find /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S "$pyc" &> /dev/null || rm -vf "$pyc"; done' -- '{}' +

- name: Hold postgres {{ postgresql_release }} from apt upgrade
  shell: apt-mark hold postgresql-{{ postgresql_major }}

- name: Create symlink to /usr/lib/postgresql/bin
  shell:
    cmd: ln -s /usr/lib/postgresql/{{ postgresql_major }}/bin /usr/lib/postgresql/bin

- name: Create relevant directories
  file:
    path: '{{ item }}'
    recurse: yes
    state: directory
    owner: postgres
    group: postgres
  with_items:
    - '/home/postgres'
    - '/var/log/postgresql'
    - '/var/lib/postgresql'

- name: Allow adminapi to write custom config
  file:
    path: '{{ item }}'
    recurse: yes
    state: directory
    owner: postgres
    group: postgres
    mode: 0775
  with_items:
    - '/etc/postgresql'
    - '/etc/postgresql-custom'

- name: create placeholder config files
  file:
    path: '/etc/postgresql-custom/{{ item }}'
    state: touch
    owner: postgres
    group: postgres
    mode: 0664
  with_items:
    - 'generated-optimizations.conf'
    - 'custom-overrides.conf'

# Move Postgres configuration files into /etc/postgresql
# Add postgresql.conf
- name: import postgresql.conf
  template:
    src: files/postgresql_config/postgresql.conf.j2
    dest: /etc/postgresql/postgresql.conf
    group: postgres

# Add pg_hba.conf
- name: import pg_hba.conf
  template:
    src: files/postgresql_config/pg_hba.conf.j2
    dest: /etc/postgresql/pg_hba.conf
    group: postgres

# Add pg_ident.conf
- name: import pg_ident.conf
  template:
    src: files/postgresql_config/pg_ident.conf.j2
    dest: /etc/postgresql/pg_ident.conf
    group: postgres

# Install extensions before init
- name: Install Postgres extensions
  import_tasks: tasks/setup-docker.yml

# init DB
- name: Create directory on data volume
  file:
    path: '{{ item }}'
    recurse: yes
    state: directory
    owner: postgres
    group: postgres
    mode: 0750
  with_items:
    - "/data/pgdata"

- name: Link database data_dir to data volume directory
  file:
    src: "/data/pgdata"
    path: "/var/lib/postgresql/data"
    state: link
    force: yes

- name: Initialize the database
  become: yes
  become_user: postgres
  shell:
    cmd: /usr/lib/postgresql/bin/pg_ctl -D /var/lib/postgresql/data initdb -o "--allow-group-access"
  vars:
    ansible_command_timeout: 60
    # Circumvents the following error:
    # "Timeout (12s) waiting for privilege escalation prompt"

- name: copy PG systemd unit
  template:
    src: files/postgresql_config/postgresql.service.j2
    dest: /etc/systemd/system/postgresql.service

- name: copy optimizations systemd unit
  template:
    src: files/database-optimizations.service.j2
    dest: /etc/systemd/system/database-optimizations.service

# Reload
- name: System - systemd reload
  systemd:
    enabled: yes
    name: postgresql
    daemon_reload: yes
