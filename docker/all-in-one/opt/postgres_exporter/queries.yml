pg_database:
  master: true
  cache_seconds: 60
  query: |
    select sum(size_b) / (1024 * 1024) as size_mb
    from (select sum(pg_database_size(pg_database.datname)) as size_b
          from pg_database
          union all
          select sum(size) as size_b
          from pg_ls_waldir()) s;
  metrics:
    - size_mb:
        usage: "GAUGE"
        description: "Disk space used by the database"

pg_stat_bgwriter:
  master: true
  cache_seconds: 60
  query: |
    select checkpoints_timed     as checkpoints_timed_total,
           checkpoints_req       as checkpoints_req_total,
           checkpoint_write_time as checkpoint_write_time_total,
           checkpoint_sync_time  as checkpoint_sync_time_total,
           buffers_checkpoint    as buffers_checkpoint_total,
           buffers_clean         as buffers_clean_total,
           maxwritten_clean      as maxwritten_clean_total,
           buffers_backend       as buffers_backend_total,
           buffers_backend_fsync as buffers_backend_fsync_total,
           buffers_alloc         as buffers_alloc_total,
           stats_reset
    from pg_stat_bgwriter
  metrics:
    - checkpoints_timed_total:
        usage: "COUNTER"
        description: "Scheduled checkpoints performed"
    - checkpoints_req_total:
        usage: "COUNTER"
        description: "Requested checkpoints performed"
    - checkpoint_write_time_total:
        usage: "COUNTER"
        description: "Time spent writing checkpoint files to disk"
    - checkpoint_sync_time_total:
        usage: "COUNTER"
        description: "Time spent synchronizing checkpoint files to disk"
    - buffers_checkpoint_total:
        usage: "COUNTER"
        description: "Buffers written during checkpoints"
    - buffers_clean_total:
        usage: "COUNTER"
        description: "Buffers written by bg writter"
    - maxwritten_clean_total:
        usage: "COUNTER"
        description: "Number of times bg writer stopped a cleaning scan because it had written too many buffers"
    - buffers_backend_total:
        usage: "COUNTER"
        description: "Buffers written directly by a backend"
    - buffers_backend_fsync_total:
        usage: "COUNTER"
        description: "fsync calls executed by a backend directly"
    - buffers_alloc_total:
        usage: "COUNTER"
        description: "Buffers allocated"
    - stats_reset:
        usage: "COUNTER"
        description: "Most recent stat reset time"

pg_stat_database:
  master: true
  cache_seconds: 60
  query: |
    SELECT sum(numbackends)           as num_backends,
           sum(xact_commit)           as xact_commit_total,
           sum(xact_rollback)         as xact_rollback_total,
           sum(blks_read)             as blks_read_total,
           sum(blks_hit)              as blks_hit_total,
           sum(tup_returned)          as tup_returned_total,
           sum(tup_fetched)           as tup_fetched_total,
           sum(tup_inserted)          as tup_inserted_total,
           sum(tup_updated)           as tup_updated_total,
           sum(tup_deleted)           as tup_deleted_total,
           sum(conflicts)             as conflicts_total,
           sum(temp_files)            as temp_files_total,
           sum(temp_bytes)            as temp_bytes_total,
           sum(deadlocks)             as deadlocks_total,
           max(stats_reset)           as most_recent_reset
    FROM pg_stat_database
  metrics:
    - num_backends:
        usage: "GAUGE"
        description: "The number of active backends"
    - xact_commit_total:
        usage: "COUNTER"
        description: "Transactions committed"
    - xact_rollback_total:
        usage: "COUNTER"
        description: "Transactions rolled back"
    - blks_read_total:
        usage: "COUNTER"
        description: "Number of disk blocks read"
    - blks_hit_total:
        usage: "COUNTER"
        description: "Disk blocks found in buffer cache"
    - tup_returned_total:
        usage: "COUNTER"
        description: "Rows returned by queries"
    - tup_fetched_total:
        usage: "COUNTER"
        description: "Rows fetched by queries"
    - tup_inserted_total:
        usage: "COUNTER"
        description: "Rows inserted"
    - tup_updated_total:
        usage: "COUNTER"
        description: "Rows updated"
    - tup_deleted_total:
        usage: "COUNTER"
        description: "Rows deleted"
    - conflicts_total:
        usage: "COUNTER"
        description: "Queries canceled due to conflicts with recovery"
    - temp_files_total:
        usage: "COUNTER"
        description: "Temp files created by queries"
    - temp_bytes_total:
        usage: "COUNTER"
        description: "Temp data written by queries"
    - deadlocks_total:
        usage: "COUNTER"
        description: "Deadlocks detected"
    - most_recent_reset:
        usage: "COUNTER"
        description: "The most recent time one of the databases had its statistics reset"

pg_stat_database_conflicts:
  master: true
  cache_seconds: 60
  query: |
    SELECT sum(confl_tablespace) as confl_tablespace_total,
           sum(confl_lock)       as confl_lock_total,
           sum(confl_snapshot)   as confl_snapshot_total,
           sum(confl_bufferpin)  as confl_bufferpin_total,
           sum(confl_deadlock)   as confl_deadlock_total
    from pg_stat_database_conflicts
  metrics:
    - confl_tablespace_total:
        usage: "COUNTER"
        description: "Queries cancelled due to dropped tablespaces"
    - confl_lock_total:
        usage: "COUNTER"
        description: "Queries cancelled due to lock timeouts"
    - confl_snapshot_total:
        usage: "COUNTER"
        description: "Queries cancelled due to old snapshots"
    - confl_bufferpin_total:
        usage: "COUNTER"
        description: "Queries cancelled due to pinned buffers"
    - confl_deadlock_total:
        usage: "COUNTER"
        description: "Queries cancelled due to deadlocks"

pg_stat_statements:
  master: true
  cache_seconds: 60
  query: "SELECT sum(calls) as total_queries, sum(total_exec_time / 1000) as total_time_seconds FROM extensions.pg_stat_statements t1 JOIN pg_database t3 ON (t1.dbid=t3.oid)"
  metrics:
    - total_queries:
        usage: "COUNTER"
        description: "Number of times executed"
    - total_time_seconds:
        usage: "COUNTER"
        description: "Total time spent, in seconds"

auth_users:
  master: true
  cache_seconds: 60
  query: "select count(id) as user_count from auth.users"
  metrics:
    - user_count:
        usage: "GAUGE"
        description: "Number of users in the project db"

auth_stats:
  master: true
  cache_seconds: 3600
  query: |
    select
      count(*) filter (
        where payload ->> 'action' = 'user_invited'
           or (payload ->> 'action' in ('user_confirmation_requested', 'user_recovery_requested')
               and payload ->> 'actor_username' like '%@%')
      ) as total_auth_emails,
      count(*) filter (
        where payload ->> 'action' in ('user_confirmation_requested', 'user_recovery_requested')
          and payload ->> 'actor_username' not like '%@%'
        ) as total_auth_texts
    from
      auth.audit_log_entries
  metrics:
    - total_auth_emails:
        usage: "COUNTER"
        description: "Total number of auth emails sent"
    - total_auth_texts:
        usage: "COUNTER"
        description: "Total number of auth texts sent"

realtime:
  master: true
  cache_seconds: 60
  query: "select count(1) as postgres_changes_total_subscriptions, count(distinct subscription_id) as postgres_changes_client_subscriptions from realtime.subscription"
  metrics:
    - postgres_changes_total_subscriptions:
        usage: "GAUGE"
        description: "Total subscription records listening for Postgres changes"
    - postgres_changes_client_subscriptions:
        usage: "GAUGE"
        description: "Client subscriptions listening for Postgres changes"

replication:
  master: true
  cache_seconds: 60
  query: "SELECT slot_name, pg_wal_lsn_diff(pg_current_wal_lsn(), restart_lsn) AS realtime_lag_bytes, active AS realtime_slot_status FROM pg_replication_slots WHERE slot_name LIKE ANY (ARRAY['realtime', 'realtime_rls',  'supabase_realtime_replication_slot%'])"
  metrics:
    - realtime_slot_name:
        usage: "LABEL"
        description: "Replication Slot Name for Realtime"
    - realtime_lag_bytes:
        usage: "GAUGE"
        description: "Replication Lag for Realtime"
    - realtime_slot_status:
        usage: "GAUGE"
        description: "Replication Slot Active Status"

storage:
  master: true
  cache_seconds: 60
  query: "select sum(size) / (1024 * 1024) as storage_size_mb from storage.get_size_by_bucket()"
  metrics:
    - storage_size_mb:
        usage: "GAUGE"
        description: "The total size used for all storage buckets, in mb"

supabase_usage_metrics:
  # pg_stat_statements collects metrics from all databases on the cluster, so querying just the master db should be sufficient
  master: true
  cache_seconds: 60
  query: |
    select sum(calls) as user_queries_total
    from extensions.pg_stat_statements
    where query <> 'SELECT version()'
      and query <> 'BEGIN ISOLATION LEVEL READ COMMITTED READ ONLY'
      and query <> 'COMMIT'
      and query <> 'SET client_encoding = ''UTF8'''
      and query <> 'SET client_min_messages TO WARNING'
      and query <> 'LISTEN "ddl_command_end"'
      and query <> 'LISTEN "pgrst"'
      and query <> 'SELECT * FROM migrations ORDER BY id'
      and query <> 'SELECT COUNT(*) = $1 FROM pg_publication WHERE pubname = $2'
      and query <> 'SELECT COUNT(*) >= $1 FROM pg_replication_slots WHERE slot_name = $2'
      and query <> 'SELECT EXISTS (SELECT schema_migrations.* FROM schema_migrations AS schema_migrations WHERE version = $1)'
      and query <> 'SELECT current_setting($1)::integer, current_setting($2)'
      and query <> 'SELECT pg_advisory_unlock($1)'
      and query <> 'SELECT pg_try_advisory_lock($1)'
      and query <> 'SELECT slot_name, pg_wal_lsn_diff(pg_current_wal_lsn(), restart_lsn) FROM pg_replication_slots'
      and query <> 'SELECT typname::text, oid::int4, typarray::int4 FROM pg_type WHERE typname IN ($1,$2) ORDER BY typname'
      and query <> 'select * from schema_migrations'
      and query <> 'set local schema '''''
      and query <> 'SELECT SUM(pg_database_size(pg_database.datname)) / ($1 * $2) as size_mb FROM pg_database'
      and query not like 'select set_config(%'
      and query not like '%LATERAL (SELECT * FROM pg_namespace WHERE pg_namespace.oid = other.relnamespace) AS ns2%'
      and query not like '%LEFT JOIN (pg_collation co JOIN pg_namespace nco ON co.collnamespace = nco.oid)%'
      and query not like '%LEFT JOIN pg_description as d ON d.objoid = p.oid%'
      and query not like '%LEFT JOIN pg_description as d on d.objoid = c.oid%'
      and query not like '%-- CTE to replace information_schema.key_column_usage to remove owner limit%'
      and query not like '%join pg_namespace sch on sch.oid = tbl.relnamespace%'
      and query not like '%select setdatabase, unnest(setconfig) as setting from pg_catalog.pg_db_role_setting%'
      and lower(trim(regexp_replace(regexp_replace(query, E'\n', ' ', 'g'), E'\\s+', ' ', 'g'))) not in
          ('with rows as ( select id from net.http_request_queue order by id limit $1 ) delete from net.http_request_queue q using rows where q.id = rows.id returning q.id, q.method, q.url, timeout_milliseconds, array(select key || $2 || value from jsonb_each_text(q.headers)), q.body',
           'with rows as ( select ctid from net._http_response where created < now() - $1 order by created limit $2 ) delete from net._http_response r using rows where r.ctid = rows.ctid',
           'select exists ( select $2 from pg_catalog.pg_class c where c.relname = $1 and c.relkind = $3 )',
           'select description from pg_namespace n left join pg_description d on d.objoid = n.oid where n.nspname = $1',
           'select concat(schemaname, $1, tablename, $2, policyname) as policy from pg_policies order by 1 desc',
           'select concat(table_schema, $1, table_name) as table from information_schema.tables where table_schema not like $2 and table_schema <> $3 order by 1 desc',
           'select concat(conrelid::regclass, $1, conname) as fk from pg_constraint where contype = $2 order by 1 desc',
           'select datname from pg_database where datallowconn = $1 order by oid asc')
      and query <> 'insert into schema_migrations (version) values ($1)'
      -- temporarily included for older versions of pg_net
      and query not like 'SELECT%FROM net.http_request_queue%'
      and query not like 'DELETE FROM net.http_request_queue%'
      and query not like '%source: project usage%'
  metrics:
    - user_queries_total:
        usage: "COUNTER"
        description: "The total number of user queries executed"

pg_settings:
  master: true
  cache-seconds: 30
  query: "SELECT COUNT(*) as default_transaction_read_only FROM pg_settings WHERE name = 'default_transaction_read_only' AND setting = 'on';"
  metrics:
    - default_transaction_read_only:
        usage: "GAUGE"
        description: "Default transaction mode set to read only"

pg_status:
  master: true
  cache-seconds: 60
  query: "SELECT CASE WHEN pg_is_in_recovery() = false THEN 0 ELSE 1 END as in_recovery"
  metrics:
    - in_recovery:
        usage: "GAUGE"
        description: "Database in recovery"
