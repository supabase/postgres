#!/usr/bin/env bash

[ ! -z "$DEBUG" ] && set -eoux pipefail

# Function to build flake and return the output path
build_flake() {
    local flake_url="$1"
    local temp_dir=$(mktemp -d)
    if ! nix build "$flake_url" -o "$temp_dir/result"; then
        echo "ERROR: Failed to build flake $flake_url"
        exit 1
    fi
    echo "$temp_dir/result"
}

# First argument is the old version flake URL
OLDVER=$(build_flake "$1")

# Second argument is the new version flake URL
NEWVER=$(build_flake "$2")

# Third argument is the upgrade method: either pg_dumpall or pg_upgrade
if [ "$3" != "pg_dumpall" ] && [ "$3" != "pg_upgrade" ]; then
    echo "Please provide a valid upgrade method (pg_dumpall or pg_upgrade)"
    exit 1
fi
UPGRADE_METHOD="$3"

echo "Old server build: $OLDVER"
echo "New server build: $NEWVER"
echo "Upgrade method: $UPGRADE_METHOD"

PORTNO="@PGSQL_DEFAULT_PORT@"
DATDIR=$(mktemp -d)
NEWDAT=$(mktemp -d)
PGUSER=${PGUSER:-postgres}
POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
PG_PROVE=@PG_PROVE@
PGUPGRADE_TESTS=@PGUPGRADE_TESTS@
mkdir -p "$DATDIR" "$NEWDAT"

echo "using temporary directory $DATDIR for old data, which will not be removed"
echo "you are free to re-use this data directory at will"
echo

echo "PGUSER IS $PGUSER"

$OLDVER/bin/initdb -U "$PGUSER" -D "$DATDIR" --locale=C
$NEWVER/bin/initdb -U "$PGUSER" -D "$NEWDAT" --locale=C

# NOTE (aseipp): we need to patch postgresql.conf to have the right pgsodium_getkey script
PSQL_CONF_FILE=@PSQL_CONF_FILE@
PGSODIUM_GETKEY_SCRIPT=@PGSODIUM_GETKEY@
echo "patching postgresql.conf files"
for x in "$DATDIR" "$NEWDAT"; do
  sed \
    "s#@PGSODIUM_GETKEY_SCRIPT@#$PGSODIUM_GETKEY_SCRIPT#g" \
    $PSQL_CONF_FILE > "$x/postgresql.conf"
done

echo "Starting first server to load data into the system"
$OLDVER/bin/pg_ctl start -D "$DATDIR"

PRIMING_SCRIPT=@PRIMING_SCRIPT@
MIGRATIONS_DIR=@MIGRATIONS_DIR@

echo "MIGRATIONS_DIR IS $MIGRATIONS_DIR"

for sql in "$MIGRATIONS_DIR"/db/init-scripts/*.sql; do
    echo "$0: running $sql"
    $OLDVER/bin/psql -h localhost -d postgres -v ON_ERROR_STOP=1 --no-password --no-psqlrc -U postgres -f "$sql"
done

$OLDVER/bin/psql -h localhost -d postgres -v ON_ERROR_STOP=1 --no-password --no-psqlrc -U postgres -c "ALTER USER supabase_admin WITH PASSWORD '$PGPASSWORD'"
# run migrations as super user - postgres user demoted in post-setup
for sql in "$MIGRATIONS_DIR"/db/migrations/*.sql; do
    echo "$0: running $sql"
    $OLDVER/bin/psql -h localhost -d postgres -v ON_ERROR_STOP=1 --no-password --no-psqlrc -U supabase_admin -f "$sql"
done

if [ "$UPGRADE_METHOD" == "pg_upgrade" ]; then
  echo "Stopping old server"
  $OLDVER/bin/pg_ctl stop -D "$DATDIR"

  echo "Starting old server"
  $OLDVER/bin/pg_ctl start -D "$DATDIR" 

  echo "Ensuring $PGUSER is a superuser in the old database"
  "$OLDVER"/bin/psql -h localhost -U supabase_admin -p 5432 -d postgres -c "ALTER USER $PGUSER WITH SUPERUSER;" || true

  echo "Running pre-migration checks"
  "$PG_PROVE"/bin/pg_prove --psql="$OLDVER"/bin/psql -h localhost -U supabase_admin -d postgres -p 5432 "$MIGRATIONS_DIR"/tests/test.sql

  echo "Running fixtures"
  "$OLDVER"/bin/psql -h localhost -U supabase_admin -p 5432 -d postgres -f "$PGUPGRADE_TESTS/pg_upgrade/tests/97-enable-extensions.sql"
  "$OLDVER"/bin/psql -h localhost -U supabase_admin -p 5432 -d postgres -f "$PGUPGRADE_TESTS/pg_upgrade/tests/98-data-fixtures.sql"
  "$OLDVER"/bin/psql -h localhost -U supabase_admin -p 5432 -d postgres -f "$PGUPGRADE_TESTS/pg_upgrade/tests/99-fixtures.sql"

  echo "Stopping old server"
  $OLDVER/bin/pg_ctl stop -D "$DATDIR"

  echo "Migrating old data $DATDIR to $NEWDAT using pg_upgrade"

  export PGDATAOLD="$DATDIR"
  export PGDATANEW="$NEWDAT"
  export PGBINOLD="$OLDVER/bin"
  export PGBINNEW="$NEWVER/bin"

  # Create a temporary directory for pg_upgrade to work in
  UPGRADE_WORKDIR=$(mktemp -d)
  echo "Using temporary directory for pg_upgrade: $UPGRADE_WORKDIR"

  # Change to the temporary directory before running pg_upgrade
  pushd "$UPGRADE_WORKDIR"

  if ! $NEWVER/bin/pg_upgrade -U "$PGUSER" --check; then
      echo "ERROR: pg_upgrade check failed"
      popd
      exit 1
  fi

  echo "pg_upgrade check passed, proceeding with migration"
  $NEWVER/bin/pg_upgrade -U "$PGUSER"

  # Change back to the original directory
  popd
  echo "Migration complete, running post-migration checks"
  echo "Migration complete, running post-migration checks"
  echo "NEWDAT IS $NEWDAT"
  $NEWVER/bin/pg_ctl start -D "$NEWDAT"
  echo "Turning off JIT"
  cat << EOF > "$NEWDAT"/jit_off.sql
  ALTER SYSTEM SET jit = off;
  SELECT pg_reload_conf();
EOF
  "$NEWVER"/bin/psql -h localhost -U supabase_admin -p 5432 -d postgres -f "$NEWDAT"/jit_off.sql  

  "$PG_PROVE"/bin/pg_prove --psql="$NEWVER"/bin/psql -h localhost -U supabase_admin -d postgres -p 5432 \
    "$PGUPGRADE_TESTS/pg_upgrade/tests/01-schema.sql"
  "$PG_PROVE"/bin/pg_prove --psql="$NEWVER"/bin/psql -h localhost -U supabase_admin -d postgres -p 5432 \
    "$PGUPGRADE_TESTS/pg_upgrade/tests/02-data.sql"
  "$PG_PROVE"/bin/pg_prove --psql="$NEWVER"/bin/psql -h localhost -U supabase_admin -d postgres -p 5432 \
    "$PGUPGRADE_TESTS/pg_upgrade/tests/03-settings.sql"
  $NEWVER/bin/pg_ctl stop -D "$NEWDAT"
  exit 0
fi

if [ "$UPGRADE_METHOD" == "pg_dumpall" ]; then
    SQLDAT="$DATDIR/dump.sql"
    echo "Exporting data via pg_dumpall ($SQLDAT)"
    $OLDVER/bin/pg_dumpall -h localhost -U supabase_admin -p 5432 > "$SQLDAT"

    echo "Stopping old server (v${1}) to prepare for migration"
    $OLDVER/bin/pg_ctl stop -D "$DATDIR"

    echo "Starting second server (v${2}) to load data into the system"
    $NEWVER/bin/pg_ctl start -D "$NEWDAT"

    echo "Creating supabase_admin role and granting necessary permissions"
    $NEWVER/bin/psql -h localhost -U "$PGUSER" -d postgres -p 5432 <<EOF
    CREATE ROLE supabase_admin WITH LOGIN SUPERUSER CREATEDB CREATEROLE REPLICATION;
    ALTER ROLE supabase_admin WITH PASSWORD '$PGPASSWORD';
    GRANT ALL PRIVILEGES ON DATABASE postgres TO supabase_admin;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO supabase_admin;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO supabase_admin;
    GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO supabase_admin;
EOF

    echo "Loading data into new server (v${2}) via 'cat | psql'"
    cat "$SQLDAT" | $NEWVER/bin/psql -h localhost -U supabase_admin -d postgres -p 5432

    printf "\n\n\n\n"
    echo "Done, check logs. Stopping the server; new database is located at $NEWDAT"
    $NEWVER/bin/pg_ctl stop -D "$NEWDAT"
fi